# -*- coding: utf-8 -*-
"""Social_Media_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJeailQYD9RDOcysKrSaPjbjfSpC9Ka9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

from google.colab import drive
drive.mount('/content/drive')

regisrations = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Registrations")
sources = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Sources")
costs = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Costs")
activity = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Activity")
payment_revenue = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Payment Revenue")
ads_revenue = pd.read_excel("/content/drive/My Drive/task.xlsx", sheet_name="Ads revenue")
dfs = [regisrations, sources, costs, activity, payment_revenue, ads_revenue]

for df in dfs:
    df = df.convert_dtypes()
    print(list(df.columns))

regisrations["day_of_week"] = regisrations.registration_date.apply(lambda x: x.day_of_week)

#activity distribution
act_agg = activity.groupby("user_id").sum()
fig, ax = plt.subplots(len(act_agg.columns) // 2 + 1, 2, figsize=(10, 15))
print(f"total {len(act_agg)} users")
for i, column in enumerate(act_agg.columns):
    q = act_agg[column].quantile(0.98)
    data = act_agg[column][act_agg[column] <= q]
    bins = np.arange(0, (data.max() // 10 + 1) * 10, data.max()//10 + 1)
    ax[i // 2, i % 2].hist(data, bins = bins, align="mid", rwidth=0.9)#, density=True)
    ax[i // 2, i % 2].set_xticks(bins)
    ax[i // 2, i % 2].set_title(column + f": {len(data)} entries\n{q} is 0.98 quantile")

print(len(act_agg.photo_uploads[act_agg.photo_uploads == 0])/ len(act_agg.photo_uploads))
print(len(act_agg.photo_uploads[act_agg.photo_uploads == 1])/ len(act_agg.photo_uploads))
print(len(act_agg.photo_uploads[act_agg.photo_uploads > 1])/ len(act_agg.photo_uploads))

act_agg.describe()

#total users
reg_agg = regisrations[["registration_date", "user_id"]].groupby("registration_date").count()
reg_agg = reg_agg.rename(columns={"user_id":"registered"})
reg_agg["total"] = reg_agg.registered.cumsum()
fig, ax1 = plt.subplots()
print(reg_agg.total[-1] / 31)
ax1.plot(range(len(reg_agg)), reg_agg.total)
ax1.set_xlabel("day")
ax1.set_ylabel("users registered")
ax1.set_title("Users registered")

#new registrations
plt.plot(range(len(reg_agg.registered.rolling(4).mean())), reg_agg.registered.rolling(4).mean(), label="regisrations")
plt.xlabel("day")
plt.ylabel("registered")
plt.title("registrations per day")
plt.legend()

act_users = activity.groupby("date").count()
plt.plot(range(len(act_users)), act_users.user_id)

#activity dynamic
act_date = activity.groupby("date").sum().rolling(4).mean()
fig, ax = plt.subplots((len(act_date.columns) - 1) // 2 + 1, 2, figsize = (11, 11))
act_users = activity.groupby("date").count().rolling(4).mean()
ax[0, 0].plot(range(len(act_users)), act_users.user_id)
ax[0, 0].set_title("Daily active users")
#ax[0, 0].set_xlabel("day")
for i, column in enumerate(act_date.columns[1:]):
    ax[(i + 1) // 2, (i + 1) % 2].plot(range(len(reg_agg)), act_date[column], label=column)
    ax[(i + 1) // 2, (i + 1) % 2].set_title(column)
    #ax[(i + 1) // 2, (i + 1) % 2].set_xlabel("day")

act_date.columns

fig, ax = plt.subplots(2, 2, figsize=(10, 7))
for i, col in enumerate(["likes", "page_views", "photo_uploads", "messages"]):
    ax[i // 2, i % 2].plot(range(31), act_date[col].div(act_date.logins))
    print(col, act_date[col].div(act_date.logins)[-1])
    ax[i // 2, i % 2].set_title(col + " per session")

#difference during the week
act_date["day_of_week"] = act_date.index.day_of_week
act_week = act_date[act_date.columns[2:]].groupby("day_of_week").mean()
fig, ax = plt.subplots(2, 2, figsize = (10, 7))
for i, column in enumerate(act_week.columns):
    ax[i // 2, i % 2].bar(act_week.index, act_week[column])
    ax[i // 2, i % 2].set_title(column)

#difference during the week
act_week.messages.max() / act_week.messages.min()

#daily active users
dau_df = activity[["date", "user_id"]].groupby("date").count()
print(round(dau_df.user_id.rolling(7).mean()[-1]))
plt.plot(range(len(dau_df)), dau_df.user_id.rolling(7).mean())
plt.title("Daily active users")

#sessions per user
spu = act_agg["logins"].to_frame()
spu = spu.merge(regisrations[["registration_date", "user_id", "source_id"]], how="inner", left_index=True, right_on="user_id").set_index("user_id")
spu["days"] = regisrations.registration_date.max() - spu.registration_date + pd.Timedelta("1 day")
spu["spu"] = spu.logins / spu.days.apply(lambda x: x.days)
spu = spu.groupby("source_id").spu.mean().to_frame()
spu.index = sources.network_name
spu = spu.reset_index()
spu

#quality of users
actions = activity.merge(regisrations[["user_id", "source_id"]], how="inner", on="user_id")
actions = actions.drop(columns=["date", "user_id"])
user_count = actions.groupby("source_id").count().iloc[:, 0]
actions = actions.groupby("source_id").sum()
actions["users"] = user_count
user_count.index = sources.network_name
actions = actions.div(actions.users.values, axis=0)
actions.index = sources.network_name
actions.reset_index(inplace=True)
actions

actions_per = actions[actions.columns[1:]].div(actions[actions.columns[1:]].sum(axis=0))
actions_per["network_name"] = actions.network_name
plt.subplots(figsize=(10, 6))
for i, net in enumerate(actions_per.network_name.values):
    data = actions_per.loc[i, actions_per.columns[:-2]]
    bot = actions_per.loc[:(i - 1), actions_per.columns[:-2]].sum(axis=0)
    plt.bar(list(data.index) + ["average"], list(data.values) + [sum(data.values) / 5], width=0.8, bottom=list(bot) + [sum(bot.values) / 5], label=net)
    #plt.bar(, sum(data.values), bottom=))
    for j, act in enumerate(data.index):
        plt.text(j - 0.25, bot.values[j] + data.values[j]/2 - 0.01, str(round(data.values[j] * 100, 1)) + "%")
    plt.text(4.75, sum(bot.values) / 5 + sum(data.values) / 10 - 0.01, str(round(sum(data.values) / 5 * 100, 1)) + "%")
plt.bar(["", " "], [0, 0])
plt.legend()

#economic of users
network_info_total = costs.groupby("source_id").sum()
network_info_total.index = sources.network_name
network_info_total["acquired"] = user_count
network_info_total = network_info_total[network_info_total.columns[[1, 0]]]
network_info_total["payment_revenue"] = payment_revenue.merge(regisrations[["user_id", "source_id"]], how="inner", on="user_id").groupby("source_id").sum().payment_revenue.values
network_info_total["ads_revenue"] = ads_revenue.merge(regisrations[["user_id", "source_id"]], how="inner", on="user_id").groupby("source_id").sum().ads_revenue.values
#network_info_total[network_info_total.columns[1:]] = network_info_total[network_info_total.columns[1:]].div(network_info_total.acquired.values, axis = 0)
network_info_total["revenue"] = network_info_total.payment_revenue + network_info_total.ads_revenue
network_info_total

network_info = network_info_total.div(network_info_total.acquired.values, axis = 0)
network_info

for net in network_info.index:
    plt.scatter(network_info.cost[net], network_info.revenue[net], label=net)
plt.plot([0, max(network_info.cost.max(), network_info.revenue.max())], [0, max(network_info.cost.max(), network_info.revenue.max())])
plt.xlabel("cost")
plt.ylabel("revenue")
plt.legend()

reg_source = regisrations.groupby(by=["registration_date", "source_id"]).count().user_id.to_frame().reset_index().rename(columns={"user_id":"acquired", "registration_date":"date"})
reg_source = costs.merge(reg_source, on=["date", "source_id"], how="inner")
reg_source["network_name"] = reg_source.source_id.map(dict(sources.set_index("source_id").network_name))
for net in reg_source.network_name.unique():
    plt.scatter(reg_source.cost[reg_source.network_name == net], reg_source.acquired[reg_source.network_name == net], label=net, s = 10, alpha=0.8)
plt.legend()
#plt.scatter(reg_source.cost, reg_source.acquired, c=reg_source.source_id)

"""# New Section"""

reg_source.to_csv("registrations_by_cost.csv")

reg_source

money = reg_source.groupby("date").sum().cost.to_frame()
money["cost_total"] = money.cost.cumsum()#.to_frame()
money["revenue"] = ads_revenue.groupby("date").sum().ads_revenue + payment_revenue.groupby("date").sum().payment_revenue
money["revenue_total"] = money.revenue.cumsum()
money.reset_index(inplace=True)
#plt.plot(range(31), money.cost, label="cost")
#plt.plot(range(31), money.revenue, label="revenue")
plt.plot(range(31), (money.revenue_total - money.cost_total).rolling(4).mean())
plt.title("Income")
plt.grid()
#plt.legend()

money.revenue_total.values[-1] - money.cost_total.values[-1]

plt.plot(range(31), money.cost, label="cost")
plt.plot(range(31), money.revenue, label="revenue")
plt.legend()